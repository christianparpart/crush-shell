# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}

    name: "${{ matrix.cpp_compiler }}-${{ matrix.os }}-${{ matrix.build_type }}"

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        # os: [ubuntu-latest, macos-latest]
        # os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [RelWithDebInfo]
        c_compiler: [gcc, clang-14]
        include:
          # - os: windows-latest
          #   c_compiler: cl
          #   cpp_compiler: cl
          # - os: macos-latest
          #   c_compiler: clang-14
          #   cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang-14
            cpp_compiler: clang++-14
        # exclude:
        #   # - os: windows-latest
        #   #   c_compiler: gcc
        #   # - os: windows-latest
        #   #   c_compiler: clang
        #   - os: macos-latest
        #     c_compiler: gcc
        #   - os: macos-latest
        #     c_compiler: cl
        #   - os: ubuntu-latest
        #     c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-${{ matrix.os }}-${{ matrix.c_compiler }}
        max-size: 256M
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: "Get library crispy & vtparser"
      run: |
        set -ex
        git clone --depth=1 https://github.com/contour-terminal/contour.git
        ln -s $PWD/contour/src/crispy src/crispy
        ln -s $PWD/contour/src/vtparser src/vtparser

    - name: "install dependencies"
      run: |
        set -ex
        ./scripts/install-deps.sh
        sudo apt install -y librange-v3-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration.
      # Note that --build-config is needed because the default Windows generator is
      # a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --output-on-failure --build-config ${{ matrix.build_type }}
      timeout-minutes: 1
